import streamlit as st
import tempfile
import librosa
import os
from transcriber import transcribe_audio
from youtube_utils import download_yt_audio
import time

# Configura칞칚o inicial da p치gina
st.set_page_config(
    page_title="Transcri칞칚o de 츼udio",
    page_icon="游꿚",
    layout="centered"
)

# Inicializa칞칚o do estado da sess칚o
if "transcription" not in st.session_state:
    st.session_state["transcription"] = None
if "audio_name" not in st.session_state:
    st.session_state["audio_name"] = None
if "youtube_url" not in st.session_state:
    st.session_state["youtube_url"] = ""
if "audio_context_type" not in st.session_state:
    st.session_state["audio_context_type"] = "Geral"
if "context_description" not in st.session_state:
    st.session_state["context_description"] = ""
if "download_status" not in st.session_state:
    st.session_state["download_status"] = ""
if "reset_trigger" not in st.session_state:
    st.session_state["reset_trigger"] = False

# T칤tulo e Introdu칞칚o
st.title('Transcri칞칚o de 츼udio')
st.write('Transcreva 치udios de v칤deos do YouTube ou de arquivos de 치udio pr칩prios')
st.info('Web app criado no [**Streamlit**](https://streamlit.io) por [**Leo Lacerda**](https://leolacerda.com.br)', icon="游뱁")

# Modelo 칰nico definido
whisper_model = "base"

# Reset dos inputs caso seja necess치rio
if st.session_state.get("reset_trigger", False):
    st.session_state["audio_context_type"] = "Geral"
    st.session_state["context_description"] = ""

# Sele칞칚o do tipo de 치udio
st.write("#### Sobre o 치udio")
audio_context_type = st.selectbox(
    "Qual o tipo de 치udio?",
    ["Geral", "Entrevista", "Aula ou palestra"],
    index=["Geral", "Entrevista", "Aula ou palestra"].index(st.session_state.get("audio_context_type", "Geral")),
    key="audio_context_type",
    help="Selecione o tipo do 치udio para fornecer ao sistema mais contexto, o que pode melhorar a precis칚o da transcri칞칚o."
)

# Entrada para descri칞칚o opcional do contexto
context_description = st.text_area(
    "Descreva o contexto do 치udio (opcional):",
    value=st.session_state.get("context_description", ""),
    height=80,
    key="context_description",
    help="Se poss칤vel, forne칞a mais detalhes sobre o 치udio. Isso pode ajudar o sistema a gerar uma transcri칞칚o mais precisa."
)

# Gera o prompt final
default_prompts = {
    "Geral": "Este 칠 um 치udio geral.",
    "Entrevista": "Este 칠 um 치udio de uma entrevista entre duas ou mais pessoas.",
    "Aula ou palestra": "Este 칠 um 치udio de uma aula ou palestra.",
}
initial_prompt = default_prompts.get(audio_context_type, "Este 칠 um 치udio geral.")  # Evita KeyError
if context_description:
    initial_prompt += f" {context_description}"

# Origem do 치udio
st.write("#### Escolha a origem do 치udio")
audio_source = st.radio("", ["YouTube", "Arquivo Pr칩prio"])

audio_path = None

# Fun칞칚o para obter a dura칞칚o do 치udio
def get_audio_duration(file_path):
    try:
        duration = librosa.get_duration(path=file_path)
        minutes = int(duration // 60)
        seconds = int(duration % 60)
        return minutes, seconds
    except Exception as e:
        st.error(f"Erro ao calcular a dura칞칚o do 치udio: {e}")
        return 0, 0

# Upload do arquivo pr칩prio
if audio_source == "Arquivo Pr칩prio":
    audio_file = st.file_uploader("Fa칞a o upload do arquivo", type=["mp3", "wav", "m4a"])
    if audio_file:
        temp_dir = tempfile.gettempdir()
        st.session_state["audio_name"] = os.path.splitext(audio_file.name)[0]
        audio_path = os.path.join(temp_dir, audio_file.name)

        with open(audio_path, "wb") as f:
            f.write(audio_file.read())
        st.success("Arquivo carregado!")

        # Exibe a dura칞칚o do 치udio
        minutes, seconds = get_audio_duration(audio_path)
        st.info(f"Dura칞칚o do 치udio: {minutes} minutos e {seconds} segundos.")

        if st.button("Transcrever"):
            start_time = time.time()
            with st.spinner("Transcrevendo... Isso pode levar alguns minutos."):
                st.session_state["transcription"] = transcribe_audio(audio_path, whisper_model, prompt=initial_prompt)
            end_time = time.time()

            total_time = end_time - start_time
            st.success(f"Transcri칞칚o finalizada em {int(total_time // 60)} minutos e {int(total_time % 60)} segundos!")
            os.remove(audio_path)

# Baixar e transcrever do YouTube
if audio_source == "YouTube":
    st.session_state["youtube_url"] = st.text_input(
        "Cole a URL do v칤deo do YouTube:",
        value=st.session_state["youtube_url"]
    )

    if st.button("Baixar e Transcrever"):
        temp_dir = tempfile.gettempdir()
        st.session_state["download_status"] = "Fazendo o download do 치udio..."  # Mensagem inicial
        st.info(st.session_state["download_status"])

        # Download do 치udio
        with st.spinner("Baixando o 치udio do YouTube... Aguarde."):
            audio_path = download_yt_audio(st.session_state["youtube_url"], temp_dir)

        if audio_path and os.path.exists(audio_path):
            st.session_state["audio_name"] = os.path.splitext(os.path.basename(audio_path))[0]
            st.session_state["download_status"] = "Download do 치udio finalizado!"  # Mensagem final
            st.success(st.session_state["download_status"])

            # Exibe a dura칞칚o do 치udio
            minutes, seconds = get_audio_duration(audio_path)
            st.info(f"Dura칞칚o do 치udio: {minutes} minutos e {seconds} segundos.")

            # Transcri칞칚o
            start_time = time.time()
            with st.spinner("Transcrevendo... Isso pode levar alguns minutos."):
                st.session_state["transcription"] = transcribe_audio(audio_path, whisper_model, prompt=initial_prompt)
            end_time = time.time()

            st.success(f"Transcri칞칚o finalizada em {int((end_time - start_time) // 60)} minutos e {int((end_time - start_time) % 60)} segundos!")
            os.remove(audio_path)
        else:
            st.session_state["download_status"] = "Falha no download do 치udio. Verifique a URL."
            st.error(st.session_state["download_status"])

# Mostrar transcri칞칚o e bot칚o de download
if st.session_state["transcription"] and st.session_state["audio_name"]:
    st.text_area("Transcri칞칚o", st.session_state["transcription"], height=300)
    txt_filename = f"{st.session_state['audio_name']}.txt"
    if st.download_button(
        "Baixar Transcri칞칚o",
        st.session_state["transcription"],
        file_name=txt_filename,
        mime="text/plain"
    ):
        # Limpa os estados ap칩s o download
        st.session_state["transcription"] = None
        st.session_state["audio_name"] = None
        st.session_state["youtube_url"] = ""
        st.session_state["reset_trigger"] = True

        # Adiciona JavaScript para rolar ao topo
        st.markdown(
            "<script>window.scrollTo(0, 0);</script>",
            unsafe_allow_html=True
        )
        st.rerun()